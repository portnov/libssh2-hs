-- GENERATED by C->Haskell Compiler, version 0.16.3 Crystal Seed, 24 Jan 2009 (Haskell)
-- Edit the ORIGNAL .chs file instead!


{-# LINE 1 "Network/SSH/Client/LibSSH2/Types.chs" #-}{-# LANGUAGE ForeignFunctionInterface #-}



{-# LINE 5 "Network/SSH/Client/LibSSH2/Types.chs" #-}

module Network.SSH.Client.LibSSH2.Types
  (Session,
   KnownHosts,
   Channel,
   IsPointer (..),
   CStringCLen,
   Size, SSize,
   withCStringLenIntConv,
   peekCStringPtr,
   peekMaybeCStringPtr
  ) where

import Foreign
import Foreign.Ptr
import Foreign.C.Types
import Foreign.C.String

type Size = (CULong)
{-# LINE 24 "Network/SSH/Client/LibSSH2/Types.chs" #-}

type SSize = (CLong)
{-# LINE 26 "Network/SSH/Client/LibSSH2/Types.chs" #-}

type CStringCLen i = (CString, i)

withCStringLenIntConv :: (Integral i) => String -> (CStringCLen i -> IO a) -> IO a
withCStringLenIntConv str fn =
  withCStringLen str (\(ptr, len) -> fn (ptr, fromIntegral len))

peekCStringPtr :: Ptr CString -> IO String
peekCStringPtr ptr = peekCAString =<< peek ptr

peekMaybeCStringPtr :: Ptr CString -> IO (Maybe String)
peekMaybeCStringPtr ptr = do
  strPtr <- peek ptr
  if strPtr == nullPtr
    then return Nothing
    else Just `fmap` peekCAString strPtr

class IsPointer p where
  fromPointer :: Ptr () -> p
  toPointer :: p -> Ptr ()

newtype Session = Session (Ptr (Session))
{-# LINE 48 "Network/SSH/Client/LibSSH2/Types.chs" #-}

instance IsPointer Session where
  fromPointer p = Session (castPtr p)
  toPointer (Session p) = castPtr p

newtype KnownHosts = KnownHosts (Ptr (KnownHosts))
{-# LINE 54 "Network/SSH/Client/LibSSH2/Types.chs" #-}

instance IsPointer KnownHosts where
  fromPointer p = KnownHosts (castPtr p)
  toPointer (KnownHosts p) = castPtr p

newtype Channel = Channel (Ptr (Channel))
{-# LINE 60 "Network/SSH/Client/LibSSH2/Types.chs" #-}

instance IsPointer Channel where
  fromPointer p = Channel (castPtr p)
  toPointer (Channel p) = castPtr p

